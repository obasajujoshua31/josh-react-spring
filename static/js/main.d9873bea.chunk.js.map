{"version":3,"sources":["components/component1.js","components/component2.js","components/component3.js","App.js","serviceWorker.js","index.js"],"names":["counter","background","textAlign","color","width","borderRadius","margin","c1Style","padding","Component1","react_default","a","createElement","web","from","opacity","marginTop","to","props","style","number","config","duration","toFixed","component2","_this","this","delay","c2Style","btn","onClick","toggle","Component","outline","c3Style","cursor","Component3","App","state","showComponent3","e","setState","console","log","className","component1","components_component2","native","items","enter","leave","show","div","component3","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAoCMA,EAAU,CACdC,WAAY,QACZC,UAAW,SACXC,MAAO,QACPC,MAAO,QACPC,aAAc,MACdC,OAAQ,aAEJC,EAAU,CACdN,WAAY,YACZE,MAAO,QACPK,QAAS,UAEIC,EA9CI,WACjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,KAAM,CAAEC,QAAS,EAAGC,WAAY,KAChCC,GAAI,CAAEF,QAAS,EAAGC,UAAW,IAE5B,SAAAE,GAAK,OACJR,EAAAC,EAAAC,cAAA,OAAKO,MAAOD,GACVR,EAAAC,EAAAC,cAAA,OAAKO,MAAOZ,GACVG,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kQAMAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,KAAM,CAAEM,OAAQ,GAChBH,GAAI,CAAEG,OAAQ,IACdC,OAAQ,CAAEC,SAAU,MAEnB,SAAAJ,GAAK,OACJR,EAAAC,EAAAC,cAAA,OAAKO,MAAOD,GACVR,EAAAC,EAAAC,cAAA,MAAIO,MAAOnB,GAAUkB,EAAME,OAAOG,mBCvB9CC,mLACK,IAAAC,EAAAC,KACP,OACEhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,GACfM,OAAQ,CAAEM,MAAO,IAAML,SAAU,MAEhC,SAAAJ,GAAK,OACJR,EAAAC,EAAAC,cAAA,OAAKO,MAAOD,GACVR,EAAAC,EAAAC,cAAA,OAAKO,MAAOS,GACVlB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kQAMAF,EAAAC,EAAAC,cAAA,UAAQO,MAAOU,EAAKC,QAASL,EAAKP,MAAMa,QAAxC,iCAlBWC,aA4BnBJ,EAAU,CACd3B,WAAY,YACZO,QAAS,SACTL,MAAO,SAEH0B,EAAM,CACV1B,MAAO,QACPK,QAAS,WACTP,WAAY,QACZgC,QAAS,OACT3B,OAAQ,WAEKkB,IC5BTU,EAAU,CACd1B,QAAS,SACTL,MAAO,QACPF,WAAY,OACZkC,OAAQ,WAGKC,EApBI,WACjB,OACE1B,EAAAC,EAAAC,cAAA,OAAKO,MAAOe,GACVxB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,oQCoCSyB,6MAlCbC,MAAQ,CACNC,gBAAgB,KAElBR,OAAS,SAAAS,GACPf,EAAKgB,SAAS,CAAEF,gBAAiBd,EAAKa,MAAMC,gBAAkB,kBAC5DG,QAAQC,IAAIlB,EAAKa,kFAInB,OACE5B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAYf,OAAQL,KAAKK,SACzBrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEkC,QAAM,EACNC,MAAOtB,KAAKY,MAAMC,eAClBzB,KAAM,CAAEC,QAAS,GACjBkC,MAAO,CAAElC,QAAS,GAClBmC,MAAO,CAAEnC,QAAS,IAEjB,SAAAoC,GAAI,OACHA,GACC,SAAAjC,GAAK,OACJR,EAAAC,EAAAC,cAACC,EAAA,EAASuC,IAAV,CAAcjC,MAAOD,GACnBR,EAAAC,EAAAC,cAACyC,EAAD,kBAzBErB,aCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d9873bea.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spring } from \"react-spring\";\n\nconst Component1 = () => {\n  return (\n    <Spring\n      from={{ opacity: 0, marginTop: -500 }}\n      to={{ opacity: 1, marginTop: 0 }}\n    >\n      {props => (\n        <div style={props}>\n          <div style={c1Style}>\n            <h1>component1</h1>\n            <p>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit.\n              Repellendus et accusantium repellat eius libero modi nostrum\n              neque, a enim nesciunt perspiciatis aliquid molestiae, dolorum\n              perferendis cupiditate tempora ipsam praesentium necessitatibus.\n            </p>\n            <Spring\n              from={{ number: 0 }}\n              to={{ number: 10 }}\n              config={{ duration: 10000 }}\n            >\n              {props => (\n                <div style={props}>\n                  <h1 style={counter}>{props.number.toFixed()}</h1>\n                </div>\n              )}\n            </Spring>\n          </div>\n        </div>\n      )}\n    </Spring>\n  );\n};\nconst counter = {\n  background: \"black\",\n  textAlign: \"center\",\n  color: \"white\",\n  width: \"100px\",\n  borderRadius: \"50%\",\n  margin: \"1rem auto\"\n};\nconst c1Style = {\n  background: \"steelblue\",\n  color: \"white\",\n  padding: \"1.4rem\"\n};\nexport default Component1;\n","import React, { Component } from \"react\";\nimport { Spring } from \"react-spring\";\n\nclass component2 extends Component {\n  render() {\n    return (\n      <Spring\n        from={{ opacity: 0 }}\n        to={{ opacity: 1 }}\n        config={{ delay: 1000, duration: 1000 }}\n      >\n        {props => (\n          <div style={props}>\n            <div style={c2Style}>\n              <h1>component2</h1>\n              <p>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Repellendus et accusantium repellat eius libero modi nostrum\n                neque, a enim nesciunt perspiciatis aliquid molestiae, dolorum\n                perferendis cupiditate tempora ipsam praesentium necessitatibus.\n              </p>\n              <button style={btn} onClick={this.props.toggle}>\n                toggle Component 3\n              </button>\n            </div>\n          </div>\n        )}\n      </Spring>\n    );\n  }\n}\nconst c2Style = {\n  background: \"slateblue\",\n  padding: \"1.2rem\",\n  color: \"white\"\n};\nconst btn = {\n  color: \"white\",\n  padding: \"8px 16px\",\n  background: \"brown\",\n  outline: \"none\",\n  margin: \"5px 0px\"\n};\nexport default component2;\n","import React from \"react\";\n\nconst Component3 = () => {\n  return (\n    <div style={c3Style}>\n      <h1>component3</h1>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus et\n        accusantium repellat eius libero modi nostrum neque, a enim nesciunt\n        perspiciatis aliquid molestiae, dolorum perferendis cupiditate tempora\n        ipsam praesentium necessitatibus.\n      </p>\n    </div>\n  );\n};\nconst c3Style = {\n  padding: \"1.2rem\",\n  color: \"white\",\n  background: \"blue\",\n  cursor: \"pointer\"\n};\n\nexport default Component3;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Component1 from \"./components/component1\";\nimport Component2 from \"./components/component2\";\nimport Component3 from \"./components/component3\";\nimport { Transition, animated } from \"react-spring\";\n\nclass App extends Component {\n  state = {\n    showComponent3: false\n  };\n  toggle = e => {\n    this.setState({ showComponent3: !this.state.showComponent3 }, () =>\n      console.log(this.state)\n    );\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Component1 />\n        <Component2 toggle={this.toggle} />\n        <Transition\n          native\n          items={this.state.showComponent3}\n          from={{ opacity: 0 }}\n          enter={{ opacity: 1 }}\n          leave={{ opacity: 0 }}\n        >\n          {show =>\n            show &&\n            (props => (\n              <animated.div style={props}>\n                <Component3 />\n              </animated.div>\n            ))\n          }\n        </Transition>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}